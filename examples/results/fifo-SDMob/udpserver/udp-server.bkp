#include <stdio.h> 
#include <sys/socket.h> 
#include <arpa/inet.h> 
#include <unistd.h> 
#include <string.h> 


#include "contiki.h"
#include "contiki-net.h"

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "net/ipv6/uiplib.h"
#include "net/routing/routing.h"
#include "net/netstack.h"
#include "net/ipv6/simple-udp.h"

#include "sys/log.h"
#define LOG_MODULE "App"
#define LOG_LEVEL LOG_LEVEL_INFO

#define WITH_SERVER_REPLY  1
#define UDP_CLIENT_PORT	8765
#define UDP_SERVER_PORT	5678
#define SOCKPORT 1234
#define DP_CLIENT	7654
#define DP_SERVER	4567


static struct simple_udp_connection udp_conn;
static struct simple_udp_connection udp_conn2;
//static char temp[16];
  static int sock = 0; 
  static struct sockaddr_in serv_addr; 
  static int totalRx=0;
//  static char *hello = "Hello from client"; 
//  static char buffer[1024] = {0}; 

PROCESS(udp_server_process, "UDP server");
//AUTOSTART_PROCESSES(&udp_server_process);
/*---------------------------------------------------------------------------*/
static void
udp_rx_callback(struct simple_udp_connection *c,
         const uip_ipaddr_t *sender_addr,
         uint16_t sender_port,
         const uip_ipaddr_t *receiver_addr,
         uint16_t receiver_port,
         const uint8_t *data,
         uint16_t datalen)
{
  char str[80];
  uiplib_ipaddr_snprint(str, sizeof(str), sender_addr);  
  strcat(str,",");
  strcat(str,(char *) data);
  strcat(str,";");
  send(sock , str , strlen(str) , 0 ); 
  // LOG_INFO("Received request '%.*s' from ", datalen, (char *) data);
  // LOG_INFO_6ADDR(sender_addr);
  // LOG_INFO_("\n");

}
static void
dp_rx_callback(struct simple_udp_connection *c,
         const uip_ipaddr_t *sender_addr,
         uint16_t sender_port,
         const uip_ipaddr_t *receiver_addr,
         uint16_t receiver_port,
         const uint8_t *data,
         uint16_t datalen)
{
  char str[80];
  // static signed char rss;
  // static signed char rss_val;
  // static signed char rss_offset;
//  printf("Sink got message from %d.%d, seqno %d, hops %d: len %d '%s'\n",originator->u8[0], originator->u8[1],seqno, hops,packetbuf_datalen(),
//         (char *)packetbuf_dataptr());
  // rss_val = cc2420_last_rssi;
  // rss_offset=-45;
  // rss=rss_val + rss_offset;
  // printf("RSSI of Last Packet Received is %d\n",rss);
    
//    valread = read( sock , buffer, 1024); 
//    printf("%s\n",buffer ); 

  uiplib_ipaddr_snprint(str, sizeof(str), sender_addr);  
  strcat(str,",");
  strcat(str,(char *) data);
  strcat(str,";");
  // send(sock , str , strlen(str) , 0 ); 
  LOG_INFO("Received HELLO '%.*s' from ", datalen, (char *) data);
  // LOG_INFO_6ADDR(sender_addr);
  LOG_INFO_("\n");
  totalRx++;
  printf("totalRx=%d\n",totalRx);

// 	int i;
// 	for (i = 0; i < 16; i++) {
//    temp[i] = sender_addr->u8[i] + '0';
//  }
// 	printf("temp:%s\n",temp);

//  char buf[UIPLIB_IPV6_MAX_STR_LEN];
//  uiplib_ipaddr_snprint(buf, sizeof(buf), sender_addr);
//  printf("buf:%s\n", buf);

  printf("sender_addr: %s\n",(char *)sender_addr);
#if WITH_SERVER_REPLY
  /* send back the same string to the client as an echo reply */
  LOG_INFO("Sending response.\n");
  // simple_udp_sendto(&udp_conn, buf, sizeof(buf), sender_addr);
#endif /* WITH_SERVER_REPLY */
}
/*---------------------------------------------------------------------------*/
PROCESS_THREAD(udp_server_process, ev, data)
{
  PROCESS_BEGIN();
    
    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) 
    { 
        printf("\n Socket creation error \n"); 
        return -1; 
    } 
   
    serv_addr.sin_family = AF_INET; 
    serv_addr.sin_port = htons(SOCKPORT); 
       
    // Convert IPv4 and IPv6 addresses from text to binary form 
    if(inet_pton(AF_INET, "127.0.0.1", &serv_addr.sin_addr)<=0)  
    { 
        printf("\nInvalid address/ Address not supported \n"); 
        return -1; 
    } 
   
    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) 
    { 
        printf("\nConnection Failed \n"); 
        return -1; 
    } 
    printf("connected!!!!!!!!!!\n");

  /* Initialize DAG root */
  //NETSTACK_ROUTING.root_start();

  /* Initialize UDP connection */
  simple_udp_register(&udp_conn, UDP_SERVER_PORT, NULL,
                      UDP_CLIENT_PORT, udp_rx_callback);
  simple_udp_register(&udp_conn2, DP_SERVER, NULL,
                      DP_CLIENT, dp_rx_callback);
  PROCESS_END();
}
/*---------------------------------------------------------------------------*/
